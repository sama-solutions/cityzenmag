// Service Worker pour CityzenMag PWA\nconst CACHE_NAME = 'cityzenmag-v1.0.0'\nconst STATIC_CACHE = 'cityzenmag-static-v1'\nconst DYNAMIC_CACHE = 'cityzenmag-dynamic-v1'\nconst API_CACHE = 'cityzenmag-api-v1'\n\n// Ressources à mettre en cache immédiatement\nconst STATIC_ASSETS = [\n  '/',\n  '/manifest.json',\n  '/icons/icon-192x192.png',\n  '/icons/icon-512x512.png'\n]\n\n// URLs des API à mettre en cache\nconst API_URLS = [\n  'https://ghpptudzucrnygrozpht.supabase.co/rest/v1/threads',\n  'https://ghpptudzucrnygrozpht.supabase.co/rest/v1/tweets',\n  'https://ghpptudzucrnygrozpht.supabase.co/rest/v1/media_files'\n]\n\n// Installation du Service Worker\nself.addEventListener('install', (event) => {\n  console.log('🔧 Service Worker: Installation')\n  \n  event.waitUntil(\n    caches.open(STATIC_CACHE)\n      .then((cache) => {\n        console.log('📦 Service Worker: Mise en cache des ressources statiques')\n        return cache.addAll(STATIC_ASSETS)\n      })\n      .then(() => {\n        console.log('✅ Service Worker: Installation terminée')\n        return self.skipWaiting()\n      })\n      .catch((error) => {\n        console.error('❌ Service Worker: Erreur installation:', error)\n      })\n  )\n})\n\n// Activation du Service Worker\nself.addEventListener('activate', (event) => {\n  console.log('🚀 Service Worker: Activation')\n  \n  event.waitUntil(\n    caches.keys()\n      .then((cacheNames) => {\n        return Promise.all(\n          cacheNames.map((cacheName) => {\n            if (cacheName !== STATIC_CACHE && \n                cacheName !== DYNAMIC_CACHE && \n                cacheName !== API_CACHE) {\n              console.log('🗑️ Service Worker: Suppression ancien cache:', cacheName)\n              return caches.delete(cacheName)\n            }\n          })\n        )\n      })\n      .then(() => {\n        console.log('✅ Service Worker: Activation terminée')\n        return self.clients.claim()\n      })\n  )\n})\n\n// Interception des requêtes\nself.addEventListener('fetch', (event) => {\n  const { request } = event\n  const url = new URL(request.url)\n  \n  // Stratégie pour les ressources statiques\n  if (STATIC_ASSETS.some(asset => request.url.includes(asset))) {\n    event.respondWith(\n      caches.match(request)\n        .then((response) => {\n          return response || fetch(request)\n        })\n    )\n    return\n  }\n  \n  // Stratégie pour les API Supabase (Cache First avec fallback)\n  if (url.hostname.includes('supabase.co')) {\n    event.respondWith(\n      caches.open(API_CACHE)\n        .then((cache) => {\n          return cache.match(request)\n            .then((cachedResponse) => {\n              if (cachedResponse) {\n                // Retourner la réponse en cache et mettre à jour en arrière-plan\n                fetch(request)\n                  .then((fetchResponse) => {\n                    if (fetchResponse.ok) {\n                      cache.put(request, fetchResponse.clone())\n                    }\n                  })\n                  .catch(() => {\n                    // Ignorer les erreurs de mise à jour en arrière-plan\n                  })\n                return cachedResponse\n              } else {\n                // Pas de cache, essayer de récupérer et mettre en cache\n                return fetch(request)\n                  .then((fetchResponse) => {\n                    if (fetchResponse.ok) {\n                      cache.put(request, fetchResponse.clone())\n                    }\n                    return fetchResponse\n                  })\n                  .catch(() => {\n                    // En cas d'erreur, retourner une réponse par défaut\n                    return new Response(\n                      JSON.stringify({ \n                        error: 'Données non disponibles hors ligne',\n                        offline: true \n                      }),\n                      {\n                        status: 200,\n                        headers: { 'Content-Type': 'application/json' }\n                      }\n                    )\n                  })\n              }\n            })\n        })\n    )\n    return\n  }\n  \n  // Stratégie pour les autres ressources (Network First avec cache fallback)\n  event.respondWith(\n    fetch(request)\n      .then((response) => {\n        // Si la réponse est OK, la mettre en cache\n        if (response.ok) {\n          const responseClone = response.clone()\n          caches.open(DYNAMIC_CACHE)\n            .then((cache) => {\n              cache.put(request, responseClone)\n            })\n        }\n        return response\n      })\n      .catch(() => {\n        // En cas d'échec réseau, chercher en cache\n        return caches.match(request)\n          .then((cachedResponse) => {\n            if (cachedResponse) {\n              return cachedResponse\n            }\n            \n            // Si c'est une navigation, retourner la page d'accueil en cache\n            if (request.mode === 'navigate') {\n              return caches.match('/')\n            }\n            \n            // Sinon, retourner une réponse d'erreur\n            return new Response(\n              'Contenu non disponible hors ligne',\n              {\n                status: 503,\n                statusText: 'Service Unavailable',\n                headers: { 'Content-Type': 'text/plain' }\n              }\n            )\n          })\n      })\n  )\n})\n\n// Gestion des messages du client\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting()\n  }\n  \n  if (event.data && event.data.type === 'GET_VERSION') {\n    event.ports[0].postMessage({ version: CACHE_NAME })\n  }\n  \n  if (event.data && event.data.type === 'CLEAR_CACHE') {\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => caches.delete(cacheName))\n      )\n    }).then(() => {\n      event.ports[0].postMessage({ success: true })\n    })\n  }\n})\n\n// Synchronisation en arrière-plan\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync') {\n    console.log('🔄 Service Worker: Synchronisation en arrière-plan')\n    event.waitUntil(\n      // Ici on pourrait synchroniser les données avec Supabase\n      Promise.resolve()\n    )\n  }\n})\n\n// Notifications push (pour plus tard)\nself.addEventListener('push', (event) => {\n  if (event.data) {\n    const data = event.data.json()\n    const options = {\n      body: data.body,\n      icon: '/icons/icon-192x192.png',\n      badge: '/icons/icon-72x72.png',\n      vibrate: [100, 50, 100],\n      data: {\n        dateOfArrival: Date.now(),\n        primaryKey: data.primaryKey\n      },\n      actions: [\n        {\n          action: 'explore',\n          title: 'Lire l\\'article',\n          icon: '/icons/icon-96x96.png'\n        },\n        {\n          action: 'close',\n          title: 'Fermer',\n          icon: '/icons/icon-96x96.png'\n        }\n      ]\n    }\n    \n    event.waitUntil(\n      self.registration.showNotification(data.title, options)\n    )\n  }\n})\n\n// Gestion des clics sur notifications\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close()\n  \n  if (event.action === 'explore') {\n    event.waitUntil(\n      clients.openWindow('/')\n    )\n  }\n})\n\nconsole.log('🎉 Service Worker CityzenMag chargé avec succès')"
  }
]